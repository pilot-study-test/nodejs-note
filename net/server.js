const net = require('net');

const data = {
    "906": "05 | 课程实战项目介绍",
    "907": "25 | RPC 调用：Node.js net建立多路复用的RPC通道",
    "1015": "36 | 课程列表页：极客时间列表页需求实现",
    "1040": "46 | 架构优化：反向代理与缓存服务",
    "1070": "57 | 彩蛋：这是一个严肃的课程",
    "136797": "01 | 课程介绍",
    "136798": "02 | 内容综述",
    "136799": "03 | Node.js是什么？",
    "136800": "04 | Node.js可以用来做什么？",
    "136801": "05 | 课程实战项目介绍",
    "136803": "06 | 什么是技术预研？",
    "136804": "07 | Node.js开发环境安装",
    "136806": "08 | 第一个Node.js程序：石头剪刀布游戏",
    "136807": "09 | 模块：CommonJS规范",
    "136808": "10 | 模块：使用模块规范改造石头剪刀布游戏",
    "136809": "11 | 模块：npm",
    "141994": "12 | 模块：Node.js内置模块",
    "143517": "13 | 异步：非阻塞I/O",
    "143557": "14 | 异步：异步编程之callback",
    "143564": "15 | 异步：事件循环",
    "143644": "16 | 异步：异步编程之Promise",
    "146470": "17 | 异步：异步编程之async/await",
    "146569": "18 | HTTP：什么是HTTP服务器？",
    "146582": "19 | HTTP：简单实现一个HTTP服务器",
    "151876": "20 | HTTP：实现网页版石头剪刀布",
    "151880": "21 | HTTP：用express优化石头剪刀布游戏",
    "151911": "23 | RPC 调用：什么是RPC调用？",
    "151912": "24 | RPC调用：Node.js Buffer编解码二进制数据包",
    "151914": "22 | HTTP：用koa优化石头剪刀布游戏",
    "152724": "25 | RPC 调用：Node.js net建立多路复用的RPC通道",
    "155083": "26 | 项目启动：整体需求分析",
    "155084": "27 | 项目启动：极客时间App下载页开发",
    "155085": "28 | 课程详情页：极客时间详情页需求解构",
    "155196": "29 | 课程详情页：将ES6模版字符串改造成模板引擎",
    "155198": "30 | 课程详情页：极客时间详情页需求实现",
    "158831": "31 | 课程播放页：极客时间播放页需求解构",
    "158832": "32 | 课程播放页：GraphQL API服务",
    "158833": "33 | 课程播放页：极客时间播放页需求实现",
    "158834": "34 | 课程列表页：极客时间列表页需求解构",
    "158835": "35 | 课程列表页：用 Vue/React 进行服务端渲染",
    "159407": "36 | 课程列表页：极客时间列表页需求实现",
    "162487": "37 | 性能工具：HTTP服务的性能测试",
    "162490": "38 | 性能工具：Node.js性能分析工具",
    "162491": "39 | 代码优化：JavaScript代码性能优化",
    "162497": "40 | 代码优化：内存管理优化",
    "162499": "41 | 代码优化：Node.js C++插件",
    "165460": "42 | 多进程优化：Node.js子进程与线程",
    "165461": "43 | 多进程优化：Node.js cluster模块实战与源码解读",
    "165463": "44 | 多进程优化：进程守护与管理",
    "165465": "45 | 架构优化：动静分离",
    "165466": "46 | 架构优化：反向代理与缓存服务",
    "168309": "47 | 概念：框架设计和工程化",
    "168311": "48 | 概念：设计模式",
    "168314": "49 | 概念：Serverless",
    "168319": "50 | 服务端框架搭建：koaless",
    "168320": "51 | 服务端框架搭建：屏蔽请求细节",
    "171566": "52 | 服务端框架搭建：完成服务端框架",
    "171568": "53 | 云函数式工程实现：服务端代码",
    "171570": "54 | 云函数式工程实现：工具端代码",
    "171571": "55 | 加餐：调试 Node.js 源码",
    "171575": "56 | 结课测试&结束语",
    "171576": "57 | 彩蛋：这是一个严肃的课程"
};

const server = net.createServer((socket) => {

    socket.on('data', (buffer) => {
        const seqBuffer = buffer.slice(0, 2);
        const lessonid = buffer.readInt32BE(2);
        
        setTimeout(() => {
            const buffer = Buffer.concat([
                seqBuffer,
                Buffer.from(data[lessonid])
            ])
            socket.write(buffer);
        }, 10 * Math.random() * 1000)
    });

});

server.listen(4000);